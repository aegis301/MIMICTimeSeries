# %% [markdown]
# ## Gathered Notebook
#
# This notebook was generated by the Gather Extension. The intent is that it contains only the code and cells required to produce the same results as the cell originally selected for gathering. Please note that the Python analysis is quite conservative, so if it is unsure whether a line of code is necessary for execution, it will err on the side of including it.
#
# **Please let us know if you are satisfied with what was gathered [here](https://aka.ms/gatherfeedback).**
#
# Thanks

# %%
import pandas as pd
import os

# %%
data_dir = "data/"
data = {}
for df in os.listdir(data_dir):
    if df.endswith(".csv"):
        try:
            data[df.replace(".csv", "")] = pd.read_csv(
                os.path.join(data_dir, df), parse_dates=["charttime"]
            )
        except ValueError:
            try:
                data[df.replace(".csv", "")] = pd.read_csv(
                    os.path.join(data_dir, df), parse_dates=["starttime", "endtime"]
                )
            except ValueError:  # no time col (e.g. demographics)
                data[df.replace(".csv", "")] = pd.read_csv(os.path.join(data_dir, df))


def convert_datime_cols(df: pd.DataFrame) -> pd.DataFrame:
    """Converts columns with "time" in the name to datetime."""
    for col in df.columns:
        if "time" in col:
            df[col] = pd.to_datetime(df[col])
    return df


def set_indices(df: pd.DataFrame) -> pd.DataFrame:
    """Sets index to stay_id or subject_id and charttime or starttime."""
    sample_indicator = "stay_id" if "stay_id" in df.columns else "subject_id"
    time_indicator = "charttime" if "charttime" in df.columns else "starttime"
    try:
        df = df.set_index([sample_indicator, time_indicator])
        # drop duplicated index
        df = df[~df.index.get_level_values(1).duplicated(keep="first")]
        return df
    except KeyError:  # demographics
        print(f"KeyError: {time_indicator} not in {df.columns}")
        return df.set_index(sample_indicator)


for df in data:
    data[df] = convert_datime_cols(data[df])  # convert columns to datetime
    data[df] = set_indices(
        data[df]
    )  # set index to stay_id/subject_id and charttime/starttime


# %%
def exclude_values_outside_icu_intime_outtime(target_df, demographics_df):
    """
    Exclude values outside of icu intime and outtime. Either use stay_id or subject_id as index level 0 and charttime or starttime as index level 1.
    """
    for patient in demographics_df.index.unique():
        icu_intime = demographics_df.loc[patient].icu_intime
        icu_outtime = demographics_df.loc[patient].icu_outtime
        subject_id = demographics_df.loc[patient].subject_id
        try:
            tmp = target_df.loc[patient][
                (target_df.loc[patient].index >= icu_intime)
                & (target_df.loc[patient].index <= icu_outtime)
            ].copy()
            target_df.loc[patient] = tmp
        except KeyError:
            try:
                tmp = target_df.loc[subject_id][
                    (target_df.loc[subject_id].index >= icu_intime)
                    & (target_df.loc[subject_id].index <= icu_outtime)
                ].copy()
                target_df.loc[subject_id] = tmp
            except KeyError:
                pass  # patient not in target_df
    return target_df


def resample(target_df, resample_freq):
    """
    Resample the data to the specified frequency.
    """
    return target_df.resample(resample_freq).ffill()


# def join_data(data, demographics, resample_freq="1H", resample_method=pd.DataFrame.resample.ffill):
#     """
#     Join the data into a single dataframe.
#     """
#     # exclude values outside of icu intime and outtime
#     data = exclude_values_outside_icu_intime_outtime(data, demographics)
#     # resample the data
#     data = resample(data, resample_freq, resample_method)
#     # join the data
#     return pd.merge(data, demographics, how="outer", left_on="stay_id", right_on="stay_id")
for df in data:
    if df == "blood_count":
        print(df)
        data[df] = exclude_values_outside_icu_intime_outtime(
            data[df], data["demographics"]
        )

# %%
